import numpy as np
from numpy.linalg import svd

data = [[-30.0, -21.0],
        [-29.4, -13.849999999999998],
        [-28.8, -12.900000000000002],
        [-28.2, -9.549999999999994],
        [-27.6, -14.800000000000004],
        [-27.0, -15.25],
        [-26.4, -16.70000000000001],
        [-25.8, -10.950000000000006],
        [-25.2, -8.600000000000005],
        [-24.6, -6.650000000000013],
        [-24.0, -10.5],
        [-23.4, -12.349999999999987],
        [-22.8, -12.400000000000023],
        [-22.2, -8.050000000000022],
        [-21.6, -4.29999999999999], [-21.0, -3.75],
        [-20.4, -6.20000000000001], [-19.8, -9.449999999999978], [-19.2, -8.099999999999977],
        [-18.6, -5.150000000000013], [-18.0, 0.0], [-17.4, -0.8499999999999872], [-16.8, -1.9000000000000234],
        [-16.2, -6.550000000000022], [-15.6, -3.800000000000045], [-15.0, -2.25], [-14.4, 4.300000000000045],
        [-13.8, 2.050000000000022], [-13.2, 2.4000000000000234], [-12.600000000000001, 6.350000000000044], [-12.0, 0.5],
        [-11.399999999999999, 0.649999999999956], [-10.8, -1.4000000000000234], [-10.2, 4.949999999999978],
        [-9.600000000000001, 6.699999999999953], [-9.0, 9.25], [-8.399999999999999, 4.800000000000047],
        [-7.800000000000001, 3.550000000000022], [-7.199999999999999, 2.9000000000000234],
        [-6.600000000000001, 7.850000000000044], [-6.0, 11.0], [-5.399999999999999, 12.149999999999956],
        [-4.800000000000001, 9.099999999999977], [-4.199999999999999, 6.449999999999978],
        [-3.6000000000000014, 7.199999999999953], [-3.0, 10.75], [-2.3999999999999986, 15.300000000000047],
        [-1.8000000000000007, 15.049999999999908], [-1.1999999999999993, 13.39999999999991],
        [-0.6000000000000014, 9.350000000000044], [0.0, 11.5], [0.6000000000000014, 13.649999999999956],
        [1.1999999999999993, 19.60000000000009], [1.8000000000000007, 17.95000000000009],
        [2.3999999999999986, 17.699999999999953], [3.0, 12.25], [3.6000000000000014, 15.800000000000047],
        [4.200000000000003, 16.549999999999912], [4.799999999999997, 13.899999999999906],
        [5.399999999999999, 20.850000000000044], [6.0, 22.0], [6.600000000000001, 25.149999999999956],
        [7.200000000000003, 20.100000000000094], [7.799999999999997, 19.450000000000088],
        [8.399999999999999, 18.199999999999953], [9.0, 23.75], [9.600000000000001, 26.300000000000047],
        [10.200000000000003, 28.049999999999912], [10.799999999999997, 24.399999999999906],
        [11.399999999999999, 22.350000000000044], [12.0, 22.5], [12.600000000000001, 26.649999999999956],
        [13.200000000000003, 30.600000000000094], [13.799999999999997, 30.950000000000088],
        [14.399999999999999, 28.699999999999953], [15.0, 25.25], [15.600000000000001, 26.800000000000047],
        [16.200000000000003, 29.549999999999912], [16.799999999999997, 34.899999999999906], [17.4, 33.850000000000044],
        [18.0, 33.0], [18.6, 28.149999999999956], [19.200000000000003, 31.100000000000094],
        [19.799999999999997, 32.45000000000009], [20.4, 39.19999999999995], [21.0, 36.75], [21.6, 37.30000000000005],
        [22.200000000000003, 41.04999999999991], [22.799999999999997, 35.399999999999906], [23.4, 35.34999999999982],
        [24.0, 33.5], [24.6, 39.65000000000018], [25.200000000000003, 41.600000000000094],
        [25.799999999999997, 43.95000000000009], [26.4, 39.70000000000018], [27.0, 38.25], [27.6, 37.79999999999982],
        [28.200000000000003, 42.54999999999991], [28.799999999999997, 45.899999999999906], [29.4, 46.84999999999982]]

sx = 0
sy = 0

for v in data:
    sx += v[0]
    sy += v[1]

n = len(data)
for i in range(n):
    data[i][0] -= sx / n
    data[i][1] -= sy / n


data = np.array(data)


def mul(A, B):
    result = []
    for i in range(len(A)):
        result.append([])
        for j in range(len(B[0])):
            result[i].append(0)

    for i in range(len(A)):
        result[i][j] = 0
        for j in range(len(B[0])):
            for k in range(len(B)):
                result[i][j] += A[i][k] * B[k][j]
    return result;

covariance = mul(data.T,data)


print("Covariance : ")
print(covariance, end="\n\n")


U, S, D = svd(covariance)


print("Eigen vector ")
print(U, end="\n\n")

print("Eigen values ")
print(S, end="\n\n")

# distribution
total_features = 0
for i in range(len(U[0])):
    Ured = U[:, i:i + 1]
    t = mul(data, Ured)
    p2 = t[np.argmax(t)][0]
    p1 = t[np.argmin(t)][0]
    total_features += p2 - p1



for i in range(len(U[0])):
    Ured = U[:, i:i + 1]

    print("Eigen vector " + str(i + 1), end=" : ")

    for x in Ured:
        print(x[0], end=" ")
    print()
    print("Eigen value of this vector : " + str(S[i]))

    t = np.dot(data, Ured)
    print("Projection of points on this vector : ")

    for x in t:
        print(x[0], end=" ")
    print()
    p2 = t[np.argmax(t)][0]
    p1 = t[np.argmin(t)][0]

    print("max value : "+str(p2))
    print("min value : "+str(p1))
    print("Feature extraction on 1d : " + str((p2 - p1) / total_features * 100)[0:4] + "%")
    print()



